function [cameraParams1,imagepointss1] = cam1()
% Auto-generated by cameraCalibrator app on 13-Apr-2022
%-------------------------------------------------------


% Define images to process
% imageFileNames = {'/home/rajan/Desktop/Student Arbeit/splitimage4/cam1/03.png',...
%     '/home/rajan/Desktop/Student Arbeit/splitimage4/cam1/06.png',...
%     };

imageFileNames = {
    '/home/rajan/Desktop/Master_Thesis/projectflame2/splitimage/cam1/3.png',... 
    '/home/rajan/Desktop/Master_Thesis/projectflame2/splitimage/cam2/3.png',...
    '/home/rajan/Desktop/Master_Thesis/projectflame2/splitimage/cam3/3.png',...
    '/home/rajan/Desktop/Master_Thesis/projectflame2/splitimage/cam4/3.png',...
    '/home/rajan/Desktop/Master_Thesis/projectflame2/splitimage/cam5/3.png',...
%    '/home/rajan/Desktop/Master_Thesis/project_phase2/splitimage/cam3/1.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/29.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/30.png',...


%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam1/18f.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam5/18f.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam1/6.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/3.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/8.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/9.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/4.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/5.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/6.png',...
%     '/home/rajan/Desktop/Master_Thesis/project_ledbulb/splitimage/cam3/3.png',...

};

% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames);


for j = 1:size(imagePoints,3)
    imageFileName = imageFileNames{j};
    I = imread(imageFileName);
    [imagePoint,boardSize] = detectCheckerboardPoints(I);
    imagePoint1 = [];
    imagePoint = imagePoints(:,:,j);
    count = 1;
    for m = 1:boardSize(2)-1
        imagePoint1(:,:,m) = [imagePoint(count,:); imagePoint(count+1,:); imagePoint(count+2,:);imagePoint(count+3,:);imagePoint(count+4,:)];
        count = count+5;
    end
    if imagePoint(1,2)<imagePoint(size(imagePoint,1),2)
        imagePoint1 = flip(imagePoint1,3);
        
    end
    if j == 6 || j==7
        %imagePoint1 = flip(imagePoint1,1);
    end
        %imagePoint1(3,:,:) =[]; 

        imagePoints2=[];
    
        for m = 1:boardSize(2)-1
            imagePoints2= [imagePoints2 ;imagePoint1(:,:,m)];
        end
    imagePoints7(:,:,j) = imagePoints2 ;
% 
%     J = insertText(I,imagePoints7(:,:,j),1:size(imagePoints7(:,:,j),1));
%     J = insertMarker(J,imagePoints7(:,:,j),'o','Color','red','Size',5);
%     figure()
%     imshow(J);
%     title(sprintf('Detected a %d x %d Checkerboard',boardSize));
end

%imagePoints= [];
imagePoints = imagePoints7;
% d = imagePoints(5,1,6)-imagePoints(1,1,1);
% imagePoints(:,1,1) = imagePoints(:,1,1)+d;
% d = imagePoints(5,1,7)-imagePoints(1,1,5);
% imagePoints(:,1,5) = imagePoints(:,1,5)+d;
% imagePoints(:,1,(1:6)) = imagePoints(:,1,(1:6))-100;
% imagePoints(:,1,(7:12)) = imagePoints(:,1,(7:12))+150;

%imagePoints(:,2,2) = imagePoints(:,2,6);
%imagePoints(:,2,4) = imagePoints(:,2,6);

% for j = 1:size(imagePoints,3)
%     imageFileName = imageFileNames{j};
%     I = imread(imageFileName);
%     J = insertText(I,imagePoints(:,:,j),1:size(imagePoints(:,:,j),1));
%     J = insertMarker(J,imagePoints(:,:,j),'o','Color','red','Size',5);
%     figure()
%     imshow(J);
% end

% imagePoints(:,:,7)=[];
% imagePoints(:,:,6)=[];

imagepointss1 = imagePoints;



imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 20;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);
count = 1;
worldpoint1 = [];
for i = 1:size(worldPoints,1)
    if mod(i,3)~=0
        worldPoints1(count,:)=worldPoints(i,:);
        count = count+1;
    end
end
%worldPoints =[];
%worldPoints = worldPoints1


% Calibrate the camera
[cameraParams1, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);


% View reprojection errors
%h1=figure; showReprojectionErrors(cameraParams1);

% Visualize pattern locations
%h2=figure; showExtrinsics(cameraParams1, 'CameraCentric');

% Display parameter estimation errors
%displayErrors(estimationErrors, cameraParams1);

% For example, you can use the calibration data to remove effects of lens distortion.
%undistortedImage = undistortImage(originalImage, cameraParams1);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
end